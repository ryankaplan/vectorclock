@import {
	namespace JSON {
		const stringify dynamic
	}
}

class VectorClock {
	var _siteId string
	var _currentTime Time

	# Initializes clock with an initial time of 0 for each site
	def new(siteId string) {
		_siteId = siteId
		_currentTime = Time.new
	}

	# Initializes clock with a given initial time
	def new(siteId string, time Time) {
		_siteId = siteId
		_currentTime = time
	}

	def currentTime Time {
		return _currentTime
	}

	# Call when an logical event happens on this site. Typically
	# right before you send a message.
	def tick {
		_currentTime.increment(_siteId)
	}

	# Call when you receive a time from another client.
	def tickAndMerge(receivedTime Time) {
		_currentTime.increment(_siteId)
		_currentTime.takeMaximums(receivedTime)
	}
}

class VectorClock.Time {
	var _countBySiteId StringMap<int>

	def new { _countBySiteId = {} }
	def new(timeJson StringMap<int>) { _countBySiteId = timeJson }

	def toJson dynamic { return JSON.stringify(self._countBySiteId) }
	def fromJson(json StringMap<int>) Time { return Time.new(json) }

	def get(key string) int {
		if key in _countBySiteId {
			return _countBySiteId[key]
		}

		# All values are implicitly 0 by default
		return 0
	}

	def increment(siteId string) {
		if !(siteId in self._countBySiteId) {
			self._countBySiteId[siteId] = 0
		}
		self._countBySiteId[siteId] += 1
	}

	def isConcurrentWith(other Time) bool {
		return self <=> other == 0
	}

	# For every key in other, take the maximum corresponding
	# value from self or other
	def takeMaximums(other Time) {
		for key in other._countBySiteId.keys {
			_countBySiteId[key] = Math.max(self.get(key), other.get(key))
		}
	}

	# Returns true if the values in each clock are identical
	def equals(other Time) bool {
		for key in self._countBySiteId.keys {
			if self.get(key) != other.get(key) {
				return false
			}
		}

		for key in other._countBySiteId.keys {
			if self.get(key) != other.get(key) {
				return false
			}
		}

		return true
	}

	# return -1 if self < other
	# returns 1 if self > other
	# returns 0 if self.equals(other) or self.isConcurrentWith(other)
	def <=>(other Time) int {

		# Build up a list of all keys in either clock
		var keys = self._countBySiteId.keys
		for key in other._countBySiteId.keys {
			keys.appendOne(key)
		}

		var foundSelfValueGreater = false
		var foundSelfValueLessThan = false
		for key in keys {
			var selfValue = self.get(key)
			var otherValue = other.get(key)

			if selfValue > otherValue {
				foundSelfValueGreater = true
			} else if selfValue < otherValue {
				foundSelfValueLessThan = true
			}
		}

		if foundSelfValueGreater && !foundSelfValueLessThan {
			# At least one value of self is strictly greater than a
			# value in other, and no value of self is strictly less
			# than other
			return 1
		}

		if !foundSelfValueGreater && foundSelfValueLessThan {
			# At least one value of self is strictly less than a
			# value in other, and no value of self is strictly greater
			# than other
			return -1
		}

		# We can't order these two clocks. We return equal/concurrent.
		return 0
	}
}
